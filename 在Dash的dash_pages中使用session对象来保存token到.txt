在Dash框架中，你可以使用Flask的`session`对象来保存token到session中。以下是一个示例，展示了如何在Dash应用中保存和获取token：

1. **导入必要的模块**：
   ```python
   import dash
   from dash import dcc, html
   from flask import session
   ```

2. **创建Dash应用**：
   ```python
   app = dash.Dash(__name__)
   app.secret_key = 'your_secret_key'  # 设置一个密钥，用于加密session数据
   ```

3. **定义一个登录路由**：
   ```python
   @app.server.route('/login', methods=['POST'])
   def login():
       # 假设你从请求中获取了token
       token = request.form.get('token')
       
       # 将token保存到session中
       session['token'] = token
       
       return 'Token saved to session'
   ```

4. **定义一个获取token的路由**：
   ```python
   @app.server.route('/get_token')
   def get_token():
       # 从session中获取token
       token = session.get('token')
       
       if token:
           return token
       else:
           return 'No token found in session'
   ```

5. **创建Dash布局**：
   ```python
   app.layout = html.Div([
       dcc.Input(id='token-input', type='text', placeholder='Enter token'),
       html.Button('Save Token', id='save-token-button'),
       html.Div(id='token-output')
   ])
   ```

6. **定义回调函数**：
   ```python
   @app.callback(
       Output('token-output', 'children'),
       [Input('save-token-button', 'n_clicks')],
       [State('token-input', 'value')]
   )
   def save_token(n_clicks, token):
       if n_clicks:
           # 将token保存到session中
           session['token'] = token
           return 'Token saved to session'
       else:
           return 'No token saved'
   ```

7. **运行Dash应用**：
   ```python
   if __name__ == '__main__':
       app.run_server(debug=True)
   ```

在这个示例中，我们创建了一个Dash应用，并在其中定义了一个登录路由和一个获取token的路由。我们还创建了一个简单的布局，其中包含一个输入框和一个按钮，用于保存token。当用户点击按钮时，我们使用回调函数将token保存到session中，并在页面上显示一条消息。

请注意，`session`对象是Flask的，因此只能在Flask的请求上下文中使用。在Dash中，我们使用`@app.server.route`装饰器来定义路由，这些路由在Flask的请求上下文中执行。